<?php
class Post {
    private $conn;
    private $table_name = "posts";
    
    // Properties
    public $post_id;
    public $user_id;
    public $content;
    public $created_at;
    public $updated_at;
    
    // Constructor
    public function __construct($db) {
        $this->conn = $db;
    }
    
    // Create a new post
    public function create() {
        $query = "INSERT INTO " . $this->table_name . " 
                  (user_id, content) 
                  VALUES (:user_id, :content)";
                  
        $stmt = $this->conn->prepare($query);
        
        // Sanitize and bind values
        $this->content = sanitize($this->content);
        
        $stmt->bindParam(':user_id', $this->user_id);
        $stmt->bindParam(':content', $this->content);
        
        try {
            if ($stmt->execute()) {
                $this->post_id = $this->conn->lastInsertId();
                return true;
            }
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
        
        return false;
    }
    
    // Get all posts for homepage feed
    public function getAllPosts() {
        $query = "SELECT p.*, u.username, u.first_name, u.last_name, u.profile_picture,
                  (SELECT COUNT(*) FROM comments WHERE post_id = p.post_id) as comment_count
                  FROM " . $this->table_name . " p
                  JOIN users u ON p.user_id = u.user_id
                  ORDER BY p.created_at DESC";
                  
        $stmt = $this->conn->prepare($query);
        $stmt->execute();
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    // Get posts by user ID
    public function getPostsByUser($userId) {
        $query = "SELECT p.*, u.username, u.first_name, u.last_name, u.profile_picture,
                  (SELECT COUNT(*) FROM comments WHERE post_id = p.post_id) as comment_count
                  FROM " . $this->table_name . " p
                  JOIN users u ON p.user_id = u.user_id
                  WHERE p.user_id = :user_id
                  ORDER BY p.created_at DESC";
                  
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(':user_id', $userId);
        $stmt->execute();
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    // Get a single post by ID
    public function getById($postId) {
        $query = "SELECT p.*, u.username, u.first_name, u.last_name, u.profile_picture
                  FROM " . $this->table_name . " p
                  JOIN users u ON p.user_id = u.user_id
                  WHERE p.post_id = :post_id
                  LIMIT 1";
                  
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(':post_id', $postId);
        $stmt->execute();
        
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    
    // Delete a post
    public function delete() {
        $query = "DELETE FROM " . $this->table_name . " 
                  WHERE post_id = :post_id AND user_id = :user_id";
                  
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(':post_id', $this->post_id);
        $stmt->bindParam(':user_id', $this->user_id);
        
        try {
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
    
    // Update a post
    public function update() {
        $query = "UPDATE " . $this->table_name . " 
                  SET content = :content
                  WHERE post_id = :post_id AND user_id = :user_id";
                  
        $stmt = $this->conn->prepare($query);
        
        // Sanitize and bind values
        $this->content = sanitize($this->content);
        
        $stmt->bindParam(':content', $this->content);
        $stmt->bindParam(':post_id', $this->post_id);
        $stmt->bindParam(':user_id', $this->user_id);
        
        try {
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}
?>
